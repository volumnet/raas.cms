@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

/// Базовая верстка
$referenceLayout: 'xl' !default;
$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px
) !default;
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px,
    xxl: 1320px
) !default; // Используется также в viewports.scss

// Убирает единицы измерения
// @param {number} $number Число с единицами измерения
// @return {number}
@function strip-unit($number) {
    @return math.div($number, ($number * 0 + 1));
}

/// Соединяет строку из списка
/// @param {list} $list Исходный список
/// @param {string} $separator Разделитель
/// @return {string}
@function str-join($list, $separator) {
    $result: '';
    @for $i from 1 through length($list) {
        @if ($i != 1) {
            $result: $result + $separator;
        }
        $result: $result + nth($list, $i);
    }
    @return $result;
}


/// Парсит медиа-запрос
/// @param {string} $viewport Медиа-запрос в формате vnMQL
/// @return {string} Запрос для подстановки в @media
@function parse-viewport($viewport) {
    @if (string.slice($viewport, 1, 1) == '!') {
        $newArg: parse-viewport(string.slice($viewport, 2));
        @if ($newArg != null) {
            @return 'not ' + $newArg;
        }
    } @else if (string.index($viewport, '|') != null) {
        $args: string.split($viewport, '|');
        $newArgs: ();
        @each $arg in $args {
            $newArg: parse-viewport($arg);
            @if ($newArg != null) {
                $newArgs: append($newArgs, $newArg);
            }
        }
        $result: str-join($newArgs, ', ');
        @return $result;
    } @else if (string.index($viewport, '&') != null) {
        $args: string.split($viewport, '&');
        $newArgs: ();
        @each $arg in $args {
            $newArg: parse-viewport($arg);
            @if ($newArg != null) {
                $newArgs: append($newArgs, $newArg);
            }
        }
        $result: str-join($newArgs, ' and ');
        @return $result;
    } @else if (string.index($viewport, '-') != null) {
        $args: string.split($viewport, '-');
        @return parse-viewport('>' + nth($args, 1) + '&<' + nth($args, 2));
    } @else if (string.slice($viewport, 1, 1) == '<') {
        $name: string.slice($viewport, 2);
        $breakpoint-names: map-keys($grid-breakpoints);
        $n: index($breakpoint-names, $name);
        @if not $n {
            @error "breakpoint `#{$name}` not found in `#{$grid-breakpoints}`";
        }
        $next: if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null); 
        $max: map.get($grid-breakpoints, $next);
        @if $max {
            @return '(max-width: ' + ($max - .02) + ')';
        } @else {
            @return null;
        }
    } @else if (string.slice($viewport, 1, 1) == '>') {
        $min: map.get($grid-breakpoints, string.slice($viewport, 2));
        @if $min {
            @return '(min-width: ' + $min + ')';
        } @else {
            @return null;
        }
    } @else if ($viewport == 'p') {
        @return 'print';
    } @else if ($viewport == 's') {
        @return 'screen';
    } @else if (($viewport != null) and ($viewport != '')) {
        @if (breakpoint-next($viewport) == null) {
            @return parse-viewport('>' + $viewport);
        } @else if ($viewport != '') {
            @return parse-viewport('>' + $viewport + '&<' + $viewport);
        }
    } 

    @return null;
}

/// Возвращает clamp-функцию для пропорционального уменьшения
/// Предполагает наличие переменной --container-width
/// Поддерживаются только значения в пикселях либо rem
/// @param {number} $size Размер
/// @param {number} $min Минимальный размер (в абсолютных величинах)
/// @return {map}
@function relMin($size, $min: null)
{
    $relativeTo: $referenceLayout;
    @if (meta.type-of($relativeTo) == string) {
        $relativeTo: map.get($container-max-widths, $relativeTo);
    }
    $sizeWithoutUnit: strip-unit($size);
    $relativeToWithoutUnit: strip-unit($relativeTo);
    @if (math.unit($size) == 'rem') {
        @if ($min) {
            // @return calc(max(#{math.div($size, $relativeTo)} * var(--container-width), #{$min}));
            @return calc(max(($sizeWithoutUnit / 16 * var(--container-width) / $relativeToWithoutUnit), #{$min}));
        } @else {
            // @return calc(#{math.div($size, $relativeTo)} * var(--container-width));
            @return calc($sizeWithoutUnit / 16 * var(--container-width) / $relativeToWithoutUnit);
        }
    } @else {
        @if ($min) {
            @return calc(max(($sizeWithoutUnit * var(--container-width) / $relativeToWithoutUnit), #{$min}));
        } @else {
            @return calc($sizeWithoutUnit * var(--container-width) / $relativeToWithoutUnit);
        }
    }
    
}


/// Между двумя или парсим
/// @param {string} $from Медиа-запрос "от" в формате vnMQL
/// @param {string} $to Медиа-запрос "до" в формате vnMQL
/// @output Медиа-запрос
@mixin viewport($from, $to: $from) {
    $media: null;
    @if ((string.index($from, '-') != null) or 
        (string.index($from, '&') != null) or 
        (string.index($from, '|') != null) or 
        (string.index($from, '<') != null) or 
        (string.index($from, '>') != null) or
        (string.index($from, '*') != null) or 
        (string.index($from, '!') != null) or
        ($from == '') or
        (not $to) or
        ($to == $from)
    ) {
        $media: parse-viewport($from);
    } @else {
        $media: parse-viewport($from + '-' + $to);
    }
    @if ($media != null) {
        @media #{$media} {
            @content;
        }
    } @else {
        @content;
    }
}



/// Свойство в зависимости от медиа-запроса
/// @param {string} $propertyName Название свойства
/// @param {map} $medias Значения в зависимости от экрана, 
///     ключами являются медиа-запросы в формате vnMQL (либо '' или * - для всех), 
///     значениями - соответствующие значения свойства, либо статическое значение
/// @output Переменная в медиа-запросе
@mixin viewport-prop($propertyName, $medias) {
    @if (meta.type-of($medias) == 'map') {
        @each $key, $val in $medias {
            @include viewport($key) {
                #{$propertyName}: $val;
            }
        }
    } @else {
        #{$propertyName}: $medias;
    }
}


/// Набор свойств в зависимости от медиа-запросов
/// @param {map} $properties Карта для использования в viewport-prop (ключи - $propertyName, значения - $medias)
/// @output Набор переменных в медиа-запросе
@mixin viewport-props($properties) {
    @each $propertyName, $medias in $properties {
        @if (meta.type-of($medias) != 'map') and (meta.type-of($medias) != 'list') {
            #{$propertyName}: $medias;
        }
    }
    @each $propertyName, $medias in $properties {
        @if (meta.type-of($medias) == 'map') {
            @each $key, $val in $medias {
                @include viewport($key) {
                    #{$propertyName}: $val;
                }
            }
        }
    }
}

/// "Умная переменная"
/// @param {string} $propertyName Название свойства
/// @param {map} $modifiers Значения в зависимости от модификатора, 
///     ключами являются модификаторы ('' для основного), значениями - либо статическое значение, 
///     либо карта для использования в viewport-prop
@mixin smartprop($propertyName, $modifiers) {
    @each $modifierSelector, $modifier in $modifiers {
        @if ($modifierSelector != '') {
            #{$modifierSelector} {
                @if (meta.type-of($modifier) == 'map') {
                    @include viewport-prop($propertyName, $modifier);
                } @else {
                    #{$propertyName}: $modifier;
                }
            }
        } @else {
            @if (meta.type-of($modifier) == 'map') {
                @include viewport-prop($propertyName, $modifier);
            } @else {
                & {
                    #{$propertyName}: $modifier;
                }
            }
        }
    }
}

/// "Умные переменные"
/// @param {map} $properties Карта для использования в smartprop (ключи - $propertyName, значения - $modifiers)
@mixin smartprops($properties) {
    @each $key, $val in $properties {
        @include smartprop($key, $val);
    }
}